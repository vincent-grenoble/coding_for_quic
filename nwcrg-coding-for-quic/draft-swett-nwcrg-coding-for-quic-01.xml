<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!-- <!ENTITY RFC3452 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3452.xml"> -->
<!ENTITY RFC5510 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5510.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-swett-nwcrg-coding-for-quic-01" ipr="trust200902">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

<front>
	
   <title abbrev="Coding for QUIC">Coding for QUIC</title>

   <author fullname="Ian Swett" initials="I." surname="Swett">
     <organization>Google</organization>
     <address>
       <postal>
         <street></street>
         <city>Cambridge</city>
         <region>MA</region>
         <code></code>
         <country>US</country>
       </postal>
       <phone></phone>
       <email>ianswett@google.com</email>
     </address>
   </author>

  <author fullname="Marie-Jose Montpetit" initials="M-J." surname="Montpetit">
     <organization>Triangle Video</organization>
     <address>
       <postal>
         <street></street>
         <city>Boston</city>
         <region>MA</region>
         <code></code>
         <country>US</country>
       </postal>
       <phone></phone>
       <email>marie@mjmontpetit.com</email>
     </address>
   </author>

   <author fullname="Vincent Roca" initials="V." surname="Roca">
     <organization>INRIA</organization>
     <address>
       <postal>
         <street></street>
         <city>Univ. Grenoble Alpes</city>
         <region></region>
         <code></code>
         <country>France</country>
       </postal>
       <phone></phone>
       <email>vincent.roca@inria.fr</email>
     </address>
   </author>

   <date/>

   <area>IRTF</area>

   <workgroup>nwcrg</workgroup>

   <keyword>QUIC, loss recovery, FEC coding, frame format, negotiation</keyword>

   <abstract>
<t>
This document focusses on the integration of FEC coding in the QUIC transport protocol in order to recover from packet losses in QUIC sessions.
This document does not specify any code but defines mechanisms to negotiate and integrate FEC Schemes in QUIC.
By using proactive loss recovery, it is expected to improve QUIC performance in sessions impacted by losses.
More precisely it is expected to improve QUIC performance with real-time sessions (since FEC coding makes packet loss recovery insensitive to RTT), with multicast sessions when applicable (since the same repair packet can recover several different losses at several receivers), and with multipath sessions when applicable (since the same repair packet protects several packets).
</t>
   </abstract>

</front>

<middle>

	<section title="Introduction">
	<!-- ====================== -->

<t>
QUIC is a new transport that aims at improving network performance by enabling out of order delivery, partial reliability, and methods of recovery besides retransmission while also improving security.
This document specifies a framework to enable FEC codes to be used to recover from lost packets within a single QUIC stream or across several QUIC streams.
</t>

<t>
The ability to add FEC coding in QUIC could be beneficial in the following situations:
<list style="symbols">
	<t>robust transmission of latency sensitive traffic, for instance real-time flows, since it enables to recover packet losses independently of the round trip time;</t>
	<t>transmission of content to a large set of QUIC reception endpoints, since the same repair content may help recovering several different packet losses at different receivers;</t>
	<t>use along with multipath communications, since repair traffic adds diversity.</t>
</list>
</t>

<t>
The design does not mandate the use of any specific FEC code (that specifies how to do encoding and decoding) nor FEC Scheme (that specifies both a FEC code but also a manner to use this code in particular in terms of signaling).
Instead it allows to negotiate the FEC code to use at session startup, assuming that more than one code could potentially be offered concurrently.
Without loss of generality in the document we consider that the encoding operations compute a linear combination of QUIC packets, regardless of whether these codes are of block type (as with Reed-Solomon codes <xref target="RFC5510"/>) or sliding window type (as with RLC codes).
Terms and definitions that apply to coding are available in <xref target="nc-taxonomy"/>.
</t>

	</section>

	<section anchor="definitionsAndAbbreviations" title="Definitions and Abbreviations">
	<!-- ====================== -->

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.
</t>


<t>This document uses the following definitions and abbreviations: <list style="hanging">
<t hangText="E:">		size of an encoding symbol (i.e., source or repair symbol), assumed fixed (in bytes)</t>
</list></t>

	</section>


<!-- =========================================================================================== -->


	<section title="General Design Considerations">
	<!-- ====================== -->

<t>
This section lists a few general considerations that govern the framework for FEC support in QUIC.
</t>

		<section title="FEC Code versus FEC Scheme, Block Codes versus Sliding Window Codes">
		<!-- ====================== -->

<t>

A FEC Scheme defines the additional protocol aspects required to use a particular FEC code <xref target="nc-taxonomy"/>.
In particular the FEC Scheme defines signaling (e.g., information contained in Source and Repair Packet header or trailers) needed to synchronize encoders and decoders.
Adding FEC protection to QUIC requires a FEC Scheme specification to be available that not only defines how to perform encoding and decoding (i.e., the code specification, that can be re-used from another specification of this FEC code) but also all the surrounded aspects that enable its use along with QUIC.
</t>

<t>
Block coding (e.g., Reed-Solomon) and sliding window coding (e.g., RLC) are two general classes of FEC codes <xref target="nc-taxonomy"/>.
In the first case, the input flow must be first segmented into a sequence of blocks, FEC encoding and decoding being performed independently on a per-block basis.
In the second case rely, a sliding encoding window continuously slides over the input flow.
It is envisioned that the two classes of codes could be used to bring FEC protection to QUIC.
</t>

		</section>

		<section title="FEC Scheme Negotiation">
		<!-- ====================== -->

<t>
There are already multiple FEC Scheme candidates and others may become available in the future.
Therefore it is assumed that a negotiation will be implemented to select one or more codes to be used over a QUIC session.
This will be implemented using the one step negotiation of the new QUIC negotiation mechanism <xref target="QUIC-transport"/>, during the QUIC handshake.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	<list style="symbols">
		<t> It is not clear whether negotiation is meant to select a single FEC Scheme or multiple potential FEC Schemes.
		In the second case (multiple FEC) it is required to have a complementary mechanism to indicate which FEC Scheme is used in a given REPAIR frame (which could be done through as many REPAIR frame type values as potential FEC Scheme negotiated).</t>

		<t> It is not clear whether negotiation is carried out at QUIC level (and therefore for multiple streams) or at a stream level (and therefore multiple streams may use multiple FEC Schemes). The terminology used above should be updated to reflect the choice.</t>

		<t> It is likely that FEC Scheme negotiation requires the use of a new dedicated Extension Frame Type. The details remain TBD.</t>
	</list></t>
</list> </t>

		</section>

		<section title="FEC Protection Within an Encrypted Channel">
		<!-- ====================== -->

<t>
FEC encoding is applied before any QUIC encryption and authentication processing.
Source symbols, that constitute the data units used by the FEC codec, contain cleartext application data.
A consequence of this approach is that it does not enable non-participating middleboxes to perform FEC encoding or decoding operation.
</t>

<t>
Coding should be applied to all QUIC packets except the 0RTT payloads. 
0RTT payloads are sent prior to negotiation, and the QUIC negotiation mechanism does not allow sending extension frames prior to handshake completion.
</t>

		</section>

		<section title="FEC Protection at the Stream Level">
		<!-- ====================== -->

<t>
FEC encoding is applied at the stream level, within a single stream or across two or more streams of the same QUIC session.
This is motivated by the fact that FEC protection is not necessarily beneficial to all data streams, but only to a subset of them.
For instance FEC protection can be highly beneficial to live video streams whose real-time requirements for which the proactive erasure correction feature of FEC, independent of the RTT, should be highly beneficial.
On the opposite, FEC protection is probably less attractive for latency insensitive bulk flows.
</t>

<t>
In order to facilitate experiments, and in order to enable backward compatibility, the STREAM frames that carry application data are kept unmodified.
On the opposite, frames that carry one or more repair symbols use a dedicated REPAIR frame type, chosen within the type range dedicated to "Extension Frames".
</t>

		</section>

		<section title="About Gaps in the Set of Source Symbols Considered During Encoding">
		<!-- ====================== -->

<t>
A given FEC Scheme MAY support or not the presence of gaps in the set of source symbols that constitute a block (for Block codes) or an encoding window (for sliding window codes).
A potential reason for non contiguous sets of source symbols is the acknowledgment of a source symbol.
When this is the case the QUIC sending endpoint MAY want to remove this source symbol from further FEC encodings.
This is particularly true with Sliding Window codes because of their flexibility during FEC encoding (the encoding window can change between two consecutive FEC encodings).
</t>

<t>
Supporting the presence of gaps could be motivated by a desire to reduce encoding and decoding complexity.
However this choice can have major consequences in terms of signaling.
Indeed each repair symbol transmitted MUST be accompanied with enough information for the QUIC decoding endpoint to unambiguously identify the exact composition of the block or encoding window.
Without any gap, the identity of the first source symbol plus the number of symbols in the block or encoding window is sufficient.
With gaps, a more complex encoding will have to be used, perhaps similar to the encoding used for selective acknowledgments.
</t>

<t>
Whether or not gaps are supported MUST be clarified in each FEC Scheme.
</t>

		</section>

	</section>


<!-- =========================================================================================== -->

	<section title="FEC Scheme Negotiation in QUIC">
	<!-- ====================== -->

<t>
FEC Scheme negotiation has several goals:
<list style="symbols">
	<t>Selecting a FEC Scheme (or FEC Schemes) that can be used by both the QUIC transmission endpoint and QUIC reception endpoint(s).
	This process requires an exchange between the QUIC endpoints;</t>

	<t>Communicating a certain number of parameters that are not expected to change over the session lifetime.
	For instance, this is the case of the symbol size parameter, E, that needs to be agreed between the endpoints, or chosen by the sender and communicated to the receiver(s);</t>
</list>
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	<list style="symbols">
	<t> It is likely that FEC Scheme negotiation requires the use of a new dedicated Extension Frame Type. The details remain TBD.</t>
	<t> The Negotiation Frame Type format remains TBD.</t>
	<t> How to communicate the parameters remains TBD.</t>
	<t> In case negotiation is different when protecting a single versus several streams, this section should be moved to the respective sections.</t>
	</list></t>
</list>
</t>

	</section>


<!-- =========================================================================================== -->

	<section title="Procedures when Protecting a Single QUIC Stream">
	<!-- ====================== -->

<t>
Streams in QUIC provide a lightweight, ordered byte-stream abstraction.
Hereafter we consider a unidirectional data flow between a QUIC sending endpoint and one (or more) QUIC reception endpoints.
Without any loss of generality, the case of bidirectional flows will be considered as several independent unidirectional flows.
</t>

<t>
This section focusses on the simple case where FEC protection is applied to a single QUIC stream.
</t>

		<section title="Application data, STREAM Frame data and Source Symbols">
		<!-- ====================== -->

<t>
Application data is kept in a transmission buffer at a QUIC sending endpoint, and sent within STREAM frames.
Each STREAM frame that carries data contains an Offset field that indicates the offset within the stream of the first byte of data, as well as a Length field that indicates the number of bytes contained in the Stream Data field.
Upon receiving a STREAM frame, using the Offset and Length fields, a QUIC reception endpoint can easily copy data in its reception buffer.
Because a QUIC Packet may be lost during transmission, the reception buffer may have gaps.
</t>

<t>
<xref target="fig_frame_2_ss_mapping"/> illustrates how source symbols are mapped to the QUIC transmission or reception buffers.
Since any source (and repair) symbol is of fixed size (E bytes) for a given stream, since QUIC guaranties that the first byte in the stream has an offset of 0, the position of each source symbol is known.
</t>


<figure anchor="fig_frame_2_ss_mapping" title="Example of source symbol mapping, when the E value is relatively small.">
        <artwork><![CDATA[
 < -E- > < -E- > < -E- > < -E- >
+-------+-------+-------+-------+
|< -- Frame 1 -- >< ----- Frame |  source symbols 0, 1, 2, 3
+-------+-------+-------+-------+
| 2 ----- >< --- Frame 3 -- >< -|  source symbols 4, 5, 6, 7
+-------+-------+----+--+-------+
| Frame 4 - >< -F5- >|             source symbols 8, 9 and 10
+-------+-------+----+             (incomplete)
]]></artwork>
</figure>

<t>
Any value for E is possible, from a single byte to several hundreds or thousands of bytes.
In general, the source symbols are not aligned with data chunks sent in the STREAM frames.
It means that a given STREAM frame may carry all the bytes of a given source symbol. 
On the opposite, when a source symbol straddles two (or even more if E is large compared to usual frame sizes) STREAM frames, a proper reception of these two (or more) STREAM frames is needed for a QUIC reception endpoint to consider that the source symbol is available for FEC operations.
The choice of an appropriate value for E may depend on the use case (in particular on the nature of application data).
Having a reasonably small value reduces the probability (but cannot prevent) that a source symbol straddles two (or even more) STREAM frames, a situation that is considered as potentially harmful (the unit of control, the source symbol, and unit of transmission, the frame, are not aligned).
However an overly small value also increases processing complexity (FEC encoding and decoding are performed over larger linear systems).
An appropriate balance should be found.
The choice of a value for E is considered as out of scope for this document. 
</t>

		</section>


		<section title="Signaling Considerations within STREAM and REPAIR Frames">
		<!-- ====================== -->

<t>
Once the initial negotiation succeeded and an appropriate FEC Scheme chosen between the QUIC endpoints, data is exchanged as follows.
Source data is transmitted within STREAM frames, as would happen without any FEC based loss recovery mechanism.
Repair data, computed during FEC encoding, on the opposite, is sent within a dedicated REPAIR frame type, chosen within the type range dedicated to "Extension Frames".
In both cases, the same Stream ID is used since both flows relate to the same stream.
</t>

<t>
The REPAIR frame format is FEC Scheme dependent.
The document specifying a FEC Scheme to be used with QUIC MUST define the REPAIR frame format, among other things.
</t>

<t>
As explained above, source data is transmitted without any modification.
From this point of view, the use of FEC coding in QUIC does not prevent backward compatibility.
This is advantage in situations where the same QUIC stream is delivered to several QUIC reception endpoints (multicast).
Even if the use of FEC coding is negotiated as stream startup, it may be appropriate to select a given FEC Scheme even if it is known that a subset of the QUIC reception endpoints do not support it.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">Several aspects remain TBD.
	<list style="symbols">
		<t>This I-D proposes to define a single generic REPAIR frame type, but an alternative could be to have a one-to-one mapping between a REPAIR frame type and a specific FEC Scheme.</t>

		<t>The use of frame type within the Extension Frames range is meant to facilitate experimentations. If the use of coding in QUIC is recognized as having benefits, a dedicated (or more, see above) frame type could be selected.</t>
	</list></t>
</list>
</t>

		</section>


		<section title="Management of Silent Periods and End of Stream">
		<!-- ====================== -->

<t>
If no application data is submitted on the stream for some time, the last source symbol may not be filled with application data.
It follows that this last source symbol cannot be considered during FEC encoding and therefore the associated bytes of the application stream are not protected.
A similar problem arrives when a stream is finished, the application having no more data to transmit.
Here also, in the general case, the last source symbol will not be filled and therefore the associated bytes of the application stream are not protected.
</t>

<t>
In order to solve this problem, it is RECOMMENDED that a QUIC sending endpoint:
<list style="symbols">
	<t> Identifies when such a situation is likely to occur, waiting no more than a certain time during an application silent period;</t>
	<t> Upon time-out, the application falls back to the alternative re-transmission based loss recovery mechanism for the bytes of the last incomplete source symbol;</t>
</list>
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:"> Clearly, the above mechanism requires more thoughts as well as experimental work.
The "end of stream" situation may be addressed through zero padding perhaps easily.
However the use of zero padding for transitory silent periods may add a lot of specification and implementation complexity. 
This aspect needs more thoughts.</t>
</list>
</t>

		</section>

	</section>


<!-- =========================================================================================== -->

	<section title="Procedures when Protecting Several QUIC Streams">
	<!-- ====================== -->

<t>
This section focusses on the general case where FEC protection is globally applied across two or more QUIC streams.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
It is not clear whether this use-case is needed.
It adds specification and implementation complexity that need to be balanced with the expected benefits.
	<list style="symbols">
	<t> Receiver: A first complexity comes from the requirement to identify to which stream a decoded source symbol belongs to.
	This is also one of the main difficulty for FECFRAME (both with block and sliding window codes) which required to distinguish an ADU (submitted by the application) from an ADUI (the same ADU plus an additional FlowID among other things).
	Do we want this level of complexity?</t>

	<t> Sender: Another complexity comes from the encoding window management at a sender. With multiple streams, shifting the encoding window to the right needs to be done based on timestamps associated to source symbols of the various streams: the oldest source symbol across all the streams will be removed.
	</t>

	<t> When two largely different streams are protected togethers (e.g., a high definition 4K video flow plus the associated relatively low-rate audio stream), is this extra complexity balanced by significant performance improvements compared to an independent protection on each stream (intuition is yes, the low bitrate flow is better protected iff the encoding window is large enough)?
	And when the various streams have a comparable bitrate?
	More work (incl. experimental work) is needed to answer this question.</t>
	</list> </t>
</list>
</t>

		<section title="Application data, STREAM Frame data and Source Symbols">
		<!-- ====================== -->

<t>
Within each stream, the source symbols MUST be defined as in the simple case of a single stream.
<xref target="fig_frame_2_ss_mapping"/> remains valid.
</t>

		</section>

		<section title="Block or Encoding Window Management">
		<!-- ====================== -->

<t>
The details of how to create the block or encoding window are specific to the FEC Scheme.
A possible approach is the following.
</t>

<t>
When creating the block (block FEC code) or encoding window (sliding window FEC code), the source symbols to consider of each stream are appended.
All the relevant source symbols of the first stream are appended, followed by all the source symbols of the second stream, etc.
These sequences do not follow any timing consideration in order to simplify signaling.
</t>

<t>
<xref target="fig_ew_across_2_streams"/> illustrates, in case of a Sliding Window FEC Scheme, an encoding window with source symbols belonging to two streams, of Stream ID 120 and 51 respectively.
</t>

<figure anchor="fig_ew_across_2_streams" title="Example of encoding window of a Sliding Window FEC Scheme and FEC protection across two streams.">
        <artwork><![CDATA[
< ----------- Stream ID 120 ---------- > < --- Stream ID 51 --- >
+-------+-------+-------+-------+-------+-------+-------+-------+
|       |       |       |       |       |       |       |       |
+-------+-------+-------+-------+-------+-------+-------+-------+
 ^       < -E- >                         ^
 |                                       |
offset = 0x42f0, length = 5*E       offset = 0x0f24, length = 3*E
]]></artwork>
</figure>

		</section>


		<section title="Signaling Considerations within STREAM and REPAIR Frames">
		<!-- ====================== -->

<t>
Source data on each stream is transmitted within STREAM frames, as would happen without any FEC based loss recovery mechanism.
</t>

<t>
Repair symbols, generated during FEC encoding as a linear combination of source symbols that belong to one or more of the streams, are transmitted within REPAIR frames.
Each REPAIR frame can be associated to any of the input streams it protects, and therefore associated to any of the associated Stream IDs.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	Check that indeed, with FEC protection across several streams, assigning a REPAIR frame to any of the streams it protects is meaningful.
	Should an approach for selecting one stream (and Stream ID) be preferred?</t>
</list>
</t>

<t>
The REPAIR frame format is FEC Scheme dependent and MUST be defined by document specifying a FEC Scheme.
One of the key information of this REPAIR frame is the composition of the block (with block codes) or encoding window (with sliding window codes) used to perform FEC encoding.
Indeed, this is the only manner to convey this information since an application flow is not predictable (e.g., if an application flow is momentarily suspended, the composition of the block or encoding window will be affected).
One possibility is to list, in each REPAIR frame header:
<list style="symbols">
	<t>the actual number of streams considered (the maximum number is known after the negotiation step, but if one of the streams remains silent for some time, it may not contribute during encoding and therefore be absent from the block or encoding window); </t>
	<t>for each stream concerned, its Stream ID, the offset of the first source symbol considered as well as the length, i.e., the number of bytes considered.</t>
</list>
This approach does not enable to keep track of the source symbol ordering across streams, but enables a non ambiguous description of the encoding window.
</t>

<t>
The FEC Scheme specification MUST also detail how to manage the block or encoding window.
For instance, should the oldest source symbol of any stream be removed from the encoding window when this latter is shifted to the right?
This would mean that a timestamp is attached to each source symbol in order to identify the oldest one across all streams.
</t>

		</section>

	</section>


<!-- =========================================================================================== -->


	<section title="Security Considerations">
	<!-- ====================== -->

<t>TBD
</t>

	</section>

	<section anchor="iana" title="IANA Considerations">
	<!-- ====================== -->

<t>TBD
</t>

	</section>

	<section title="Acknowledgments">
	<!-- ====================== -->

<t>TBD
</t>

	</section>


</middle>

<!-- =========================================================================================== -->

 <back>

	<references title="Normative References">
	<!-- ====================== -->

	&RFC2119;

	<!-- https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml -->
	<reference anchor="QUIC-transport" target="https://datatracker.ietf.org/doc/draft-ietf-quic-transport/">
		<front>
			<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
			<author initials="J." surname="Iyengar" fullname="Jana Iyengar" role="editor">
				<organization>Fastly</organization>
			</author>
			<author initials="M." surname="Thomson" fullname="Martin Thomson" role="editor">
				<organization>Mozilla</organization>
			</author>
			<date year="2018" month="May" day="22"/>
		</front>
		<seriesInfo name="Internet-Draft" value="draft-ietf-quic-transport-12"/>
	</reference>

 	</references>

	<references title="Informative References">
	<!-- ====================== -->
	<!-- &RFC3452; -->
	&RFC5510;

	<reference anchor="nc-taxonomy" target="https://datatracker.ietf.org/doc/draft-irtf-nwcrg-network-coding-taxonomy/">
		<front>
			<title>Taxonomy of Coding Techniques for Efficient Network Communications</title>
			<author initials="V." surname="Roca et al.">
			<organization>INRIA</organization>
			</author>
			<date year="2018" month="March"/>
		</front>
		<seriesInfo name="Internet-Draft" value="draft-irtf-nwcrg-network-coding-taxonomy-08"/>
	</reference>

   </references>

<!--
	<section anchor="avail-algo" title="Appendix: Reference Algorithms">

<t>This ID does not mandate nor depends on any coding scheme. However, in order to have an initial implementation with good performance and not encumbered by intellectual property and proprietary implementations, it is suggested to use the Raptor (RFC 5053) as a reference algorithm. However, since the Raptor code perform badly with small blocks, depending on the application, another alternative is to use Reed-Solomon (RFC 5510) codes. It is assumed that other candidates that are free of IPR may become candidates in the future.
</t>
	</section>

	<section anchor="middleboxes" title="Appendix: Participating Middleboxes">

<t>The coding approach described in this document does allow on path elements that have the ephemeral keys to decrypt packets and add or remove FEC packets.</t>
</section>

	<section anchor="API" title="Appendix: APIS">

<t>It is planned that the QUIC coding mechanism will conform to any common API defined in the research group.</t>

	</section>
-->

   <!-- Change Log v00 2017-03-03  MJM   Initial version -->

</back>

</rfc>
