<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced.
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC8312 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8312.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!-- <!ENTITY RFC3452 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3452.xml"> -->
<!ENTITY RFC5510 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5510.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-swett-nwcrg-coding-for-quic-03" ipr="trust200902">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

<front>

   <title abbrev="Coding for QUIC">Coding for QUIC</title>

   <author fullname="Ian Swett" initials="I." surname="Swett">
     <organization>Google</organization>
     <address>
       <postal>
         <street></street>
         <city>Cambridge</city>
         <region>MA</region>
         <code></code>
         <country>US</country>
       </postal>
       <phone></phone>
       <email>ianswett@google.com</email>
     </address>
   </author>

  <author fullname="Marie-Jose Montpetit" initials="M-J." surname="Montpetit">
     <organization>Triangle Video</organization>
     <address>
       <postal>
         <street></street>
         <city>Boston</city>
         <region>MA</region>
         <code></code>
         <country>US</country>
       </postal>
       <phone></phone>
       <email>marie@mjmontpetit.com</email>
     </address>
   </author>

   <author fullname="Vincent Roca" initials="V." surname="Roca">
     <organization>INRIA</organization>
     <address>
       <postal>
         <street></street>
         <city>Univ. Grenoble Alpes</city>
         <region></region>
         <code></code>
         <country>France</country>
       </postal>
       <phone></phone>
       <email>vincent.roca@inria.fr</email>
     </address>
   </author>

   <author fullname="Francois Michel" initials="F." surname="Michel">
     <organization>UCLouvain</organization>
     <address>
       <postal>
         <street></street>
         <city>Louvain</city>
         <region></region>
         <code></code>
         <country>Belgium</country>
       </postal>
       <phone></phone>
       <email>francois.michel@uclouvain.be</email>
     </address>
   </author>

   <date/>

   <area>IRTF</area>

   <workgroup>nwcrg</workgroup>

   <keyword>QUIC, loss recovery, FEC coding, frame format, negotiation</keyword>

   <abstract>
<t>
This document focuses on the integration of FEC coding in the QUIC transport protocol, in order to recover from packet losses.
This document does not specify any FEC code but defines mechanisms to negotiate and integrate FEC Schemes in QUIC.
By using proactive loss recovery, it is expected to improve QUIC performance in sessions impacted by packet losses.
More precisely it is expected to improve QUIC performance with real-time sessions (since FEC coding makes packet loss recovery insensitive to the round trip time), with short sessions (since FEC coding can help recovering from tail losses more rapidely than through retransmissions), with multicast sessions (since the same repair packet can recover several different losses at several receivers), and with multipath sessions (since repair packets add diversity and flexibility).
</t>
   </abstract>

</front>

<middle>

    <section title="Introduction">
    <!-- ====================== -->

<t>
QUIC is a new transport that aims at improving network performance by enabling out of order delivery, partial reliability, and methods of recovery besides retransmission, while also improving security.
This document specifies a framework to enable FEC codes to be used to recover from lost packets within a single QUIC stream or across several QUIC streams.
</t>

<t>
The ability to add FEC coding in QUIC may be beneficial in several situations:
<list style="symbols">
    <t>for a robust transmission of latency sensitive traffic, for instance real-time flows, since it enables to recover packet losses independently of the round trip time;</t>
    <t>for short sessions, in order to protect the last few packets sent, since it enables to recover from tail losses more rapidely than through retransmissions;</t>
    <t>for the transmission of contents to a large set of QUIC reception endpoints, since the same repair frame may help recovering several different packet losses at different receivers;</t>
    <t>for multipath communications, since repair traffic adds diversity and flexibility.</t>
</list>
</t>

<t>
This framework does not mandate the use of any specific FEC code (i.e., how to encode and decode) nor FEC Scheme (i.e., that specifies both a FEC code and how to use it, in particular in terms of signaling).
Instead it allows to negotiate the FEC Scheme to use at session startup, assuming that more than one solution could potentially be offered concurrently.
Without loss of generality, we assume that the encoding operations compute a linear combination of QUIC packets, regardless of whether these codes are of block type (as with Reed-Solomon codes <xref target="RFC5510"/>) or sliding window type (as with RLC codes <xref target="RLC"/>).
</t>

    </section>

    <section anchor="definitionsAndAbbreviations" title="Definitions and Abbreviations">
    <!-- ====================== -->

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.
</t>

<t>
Terms and definitions that apply to coding are available in <xref target="nc-taxonomy"/>.
More specifically, this document uses the following definitions:
<list style="hanging">
    <t hangText="Packet versus Symbol:">	a Packet is the unit of data that is exchanged over the network while a Symbol is
        the unit of data that is manipulated during the encoding and decoding operations</t>

    <t hangText="Source Symbol:">		a unit of data originating from the source that is used as input to encoding operations</t>

    <t hangText="Repair Symbol:">		a unit of data that is the result of a coding operation</t>

</list></t>

<t>This document uses the following abbreviations: <list style="hanging">
    <t hangText="E:">		size of an encoding symbol (i.e., source or repair symbol), assumed fixed (in bytes)</t>
</list></t>

    </section>


<!-- =========================================================================================== -->


    <section title="General Design Considerations">
    <!-- ====================== -->

<t>
This section lists a few general considerations that govern the framework for FEC coding support in QUIC.
</t>

        <section title="FEC Code versus FEC Scheme, Block Codes versus Sliding Window Codes">
        <!-- ====================== -->

<t>
A FEC code specifies the details of encoding and decoding operations.
In addition to that, a FEC Scheme defines the additional protocol aspects required to use a particular FEC code <xref target="nc-taxonomy"/>.
In particular the FEC Scheme defines signaling (e.g., information contained in Source and Repair Packet header or trailers) needed to synchronize encoders and decoders.
<!-- Adding FEC protection to QUIC requires a FEC Scheme specification to be available that not only defines how to perform encoding and decoding (i.e., the code specification, that can be re-used from another specification of this FEC code) but also all the surrounded aspects that enable its use along with QUIC. -->
</t>

<t>
Block coding (e.g., Reed-Solomon <xref target="RFC5510"/>) and sliding window coding (e.g., RLC <xref target="RLC"/>) are two broad classes of FEC codes <xref target="nc-taxonomy"/>.
In the first case, the input flow must be first segmented into a sequence of blocks, FEC encoding and decoding being performed independently on a per-block basis.
In the second case rely, a sliding encoding window continuously slides over the input flow.
It is envisioned that the two classes of codes could be used to bring FEC protection to QUIC, usually with an advantage for sliding window codes when it comes to low latency communications.
</t>

        </section>

        <section title="FEC Scheme Negotiation">
        <!-- ====================== -->

<t>
There are multiple FEC Scheme candidates.
Therefore a negotiation step is needed to select one or more codes to be used over a QUIC session.
This will be implemented using the one step negotiation of the new QUIC negotiation mechanism <xref target="QUIC-transport"/>, during the QUIC handshake.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
    <list style="symbols">
        <t> It is likely that FEC Scheme negotiation requires the use of a new dedicated Extension Frame Type. To Be Clarified and text updated.</t>

        <t> It is not clear whether negotiation is meant to select a **single** FEC Scheme or **multiple** FEC Schemes.
        In the second case (multiple FEC) it is required to have a complementary mechanism to indicate which FEC Scheme is used in a given REPAIR frame (which could be done through as many REPAIR frame type values as potential FEC Scheme negotiated). Is it what we want to achieve? Not sure.</t>
    </list></t>
</list> </t>

        </section>

        <section title="FEC Protection Within an Encrypted Channel">
        <!-- ====================== -->

<t>
FEC encoding is applied before any QUIC encryption and authentication processing.
Source symbols, that constitute the data units used by the FEC codec, contain cleartext data (application and/or QUIC data).
</t>

<!--
<t>
Coding should be applied to all QUIC packets except the 0RTT payloads. 
0RTT payloads are sent prior to negotiation, and the QUIC negotiation mechanism does not allow sending extension frames prior to handshake completion.
</t>
-->

        </section>

        <section title="About Middleboxes">
        <!-- ====================== -->

<t>
The coding approach described in this document does not allow on path elements (middleboxes) to take part in FEC protection.
The traffic being encrypted end-to-end, the middleboxes are not in position to perform FEC decoding, nor to add any redundant traffic.
</t>

        </section>

    </section>


<!-- =========================================================================================== -->


    <section anchor="sec:fec-protection-principles" title="FEC Protection Principles">
    <!-- ====================== -->

<t>
The present section explains how FEC encoding can be applied to QUIC.
It defines the general ideas for mapping QUIC packet frames to source symbols, as well as the associated signalling.
However this section does not define the FEC Scheme specific details that need to be specified in the related document.
</t>

        <section anchor="sec:cross-pkt-frames-fec" title="Cross Packet Frames FEC Encoding">
        <!-- ====================== -->

<t>
Although application data are originally intended to be transmitted through the QUIC stream abstraction, the design of QUIC aims at easy extensibility and other means
of application data transmission could be added as QUIC extensions. This is already the case for the proposed DATAGRAM extension of the protocol.
Moreover, QUIC transfers might benefit from protecting control frames having a potential impact on the transmission throughput, such as MAX_DATA or MAX_STREAM_DATA frames.
Therefore this document introduces an FEC protection across all or a subset of the frames of a given QUIC packet.
This design choice impacts the QUIC packet to source symbols definitions, as well as the proposed signalling.
</t>

        </section>

        <section title="Source Symbol Definition">
        <!-- ====================== -->

<t>
We choose a packet-based source symbol definition that considers the sequence of frames (or a sub-sequence of them) transmitted through QUIC packets.
</t>

<t>
In order to facilitate experiments and enable backward compatibility, the frames protected by FEC encoding are kept unmodified.
The only modification to QUIC packets carrying these frames is the addition of a dedicated TBD frame type, meant to carry signaling.
On the opposite, frames that carry one or more repair symbols use a dedicated REPAIR frame type.
In both cases, the TBD and REPAIR frame types are chosen within the type range dedicated to "Extension Frames", thereby making a legacy receiver to automatically ignore these unknown frames.
</t>


                <section title="Packet Payload to Packet Chunk Mapping">
                <!-- ====================== -->

<t>
A QUIC packet payload consists in a set of QUIC frames. These frames either carry application data (e.g., STREAM or DATAGRAM frames) or control information (e.g., MAX_DATA frames).
Each packet is either entirely received or lost and is uniquely identified by a monotonically increasing Packet Number.
As QUIC packets can be of different lengths, a special care must be taken to ensure having a fixed Source Symbol size to ease FEC Scheme implementations.
</t>


<t>
<xref target="fig_frame_2_chunk_mapping"/> illustrates how QUIC packet payloads can be divided into fixed-size chunks to facilitate the encoding of the source symbols.
Any chunk is of fixed size, E-1 bytes, leading a packet to potentially contain more than one chunk.
</t>


                    <figure anchor="fig_frame_2_chunk_mapping" title="Example of QUIC packet to chunk mapping, when the E-1 value is relatively small, with prepended zero padding when needed (here packets 1 and 2).">
                    <artwork><![CDATA[
                  |< E-1 >|< E-1 >|< E-1 >|< E-1 >|
                  |       |       |       |       |
           +------|-------|-------|-------|-------|
QUIC pkt 0 |Header|      Packet Payload           | chunks 0, 1, 2, 3
           +------|-----+-|-------|-------|-------+
QUIC pkt 1 |Header| 0   | Packet Payload  |         chunks 4, 5, 6
           +------|---+-+-|-------|-------|
QUIC pkt 2 |Header| 0 |  Packet Payload   |         chunks 7, 8, 9
           +------|---+---|-------|-------|
                    ]]></artwork>
                    </figure>

<t>
<list hangIndent="4" style="hanging">
    <t hangText="Note:">
	We should take in account the fact that the repair payload will transit through a frame
	and so maximum source symbol size must take this into account to avoid having REPAIR
	frames that do not fit into a single packet.
    </t>
</list>
</t>

                </section>

                <section title="Packet Chunk to Source Symbol Mapping">
                <!-- ====================== -->

<t>
We define source symbols as the concatenation of a single byte of metadata and one packet chunk.
These source symbols are only used during encoding and decoding and are not sent as-is on the wire.
<xref target="fig_ss_encoding"/> shows an example of 4 source symbols with their metadata.
</t>

                    <figure anchor="fig_ss_encoding" title="Example of packet chunk to source symbol mapping, when the E value is relatively small.">
                        <artwork><![CDATA[
|< --E-- >|< --E-- >|< --E-- >|< --E-- >|
| src symb| src symb| src symb| src symb|
|         |         |         |         |
+-+-------+-+-------+-+-------+-+-------+
|0| chunk |1| chunk |1| chunk |2| chunk |
+-+-------+-+-------+-+-------+-+-------+
                    ]]></artwork>
                    </figure>
<t>
The metadata consist in one byte at the beginning of each source symbol indicating the limits of the packet.
The source symbol is thus of size E bytes.
Hereunder are the possible values for the metadata byte and their meaning :
<list style="symbols">
<t>0: the source symbol contains the first chunk of the packet payload;</t>
<t>1: the source symbol contains a chunk that is neither the first or the last chunk of the packet payload;</t>
<t>2: the source symbol contains the last chunk of the packet payload</t>
</list>
</t>

<t>
Each source symbol is assigned source symbol ID allowing to determine unambiguously its position in the encoding window.
</t>

                    <section title="Open questions: What to Put in Source Symbols Metadata?">
                    <!-- ====================== -->

<t>
<list hangIndent="4" style="hanging">
	<t hangText="Note:"> Section to be removed once fixed.</t>
</list>
</t>

<t>
During the FEC encoding phase, additional data can be added to the source symbol. These data are only added during the encoding and MUST NOT be transmitted
on the wire. The encoder and decoder MUST agree on the addition of these data to the source symbol in order to avoid decoding errors. Here are some examples
of data that can be added to a source symbol during encoding and that will be decoded upon a source symbol recovery :

<list style="symbols">
	<t>
	The packet number: adding the packet number allows the decoder to know which packet has been recovered and potentially send a feedback of which
	packet has been recovered to the QUIC sender.
	</t>
	<t>
	Additional QUIC frames: the FEC encoder can for example add PADDING frames to a source symbol before proceeding to encoding. Adding PADDING frames
	to source symbols before encoding allows protecting packets of different sizes. The smaller packet payload will be added PADDING frames to match the
	size of the largest packet payload in the encoding window.
	</t>
</list>

<list hangIndent="4" style="hanging">
	<t hangText="Note:"> Maybe the decision of adding data such as padding in the source symbols should be left to the underlying FEC Scheme. </t>
</list>
</t>

<t>
Besides adding data to source symbols before encoding, some frames can be removed from the source symbol if their protection is not crucial for the
transmission in order to reduce the size of the source symbol. For example, ACK frames can be systematically stripped out of the source symbols. Stream frames of
non-delay-sensitive streams could also be removed from the source symbol. The encoder and decoder MUST agree on which frames must be stripped out of packet payloads.
This information might for example be encoded in the Source Symbol ID by the FEC encoder.
</t>

<t>
<list hangIndent="4" style="hanging">
	<t hangText="Note:"> We might want to propose standard ways/algorithms to add/remove data before the encoding ? </t>
</list>
</t>

                    </section>

                </section>

                <section title="Source Symbol Size (E) Considerations">
                <!-- ====================== -->

<t>
The source symbol size, E, MUST be strictly greater than zero bytes and strictly smaller than the minimum PMTU value allowed by QUIC.
The packet header is not part of the FEC-protected data.
When the packet payload size is not a multiple of E-1, zero-padding MUST be added at the beginning of the first chunk of the packet payload.
This is equivalent to inserting PADDING frames at the beginning of the payload.
This zero-padding, only used for FEC encoding, SHOULD NOT be sent on the wire.
</t>

<t>
The choice of an appropriate value for E may depend on the use case (in particular on the nature of application data).
A reasonably small value reduces the expected value of the added padding needed to align the payload size with a multiple of E-1, which can be a good approach when dealing with QUIC packets whose size significantly vary.
However an overly small value also increases processing complexity (FEC encoding and decoding are performed over a larger linear system since there are more source symbols), so there is an incentive to use a larger value.
An appropriate balance should be found, and this choice is considered as out of scope for this document.
</t>

                </section>

        </section>

        <section title="Source Symbol Signaling">
        <!-- ====================== -->

<t>
An explicit signaling is needed by a decoder to identify the source symbols and their position in the block (i.e., for block codes) or coding window (i.e., for sliding window codes).
While the QUIC packet number increases monotonically, it cannot be used to identify the position of a packet in the coding window as the packet number is not needed to increase by 1 for each new packet.
There is thus an ambiguity on the decoder-side between lost packets and packets that do not exist.
Similarly to FECFRAME, we propose to assign a identifier to source symbols to avoid this ambiguity. This identifier is opaque to the protocol and will be defined by the underlying FEC schemes.
This is out of the scope of this document. An example of identifier could be an integer increasing by 1 for each new source symbol
</t>

<t>
In order to announce the source symbol identifier to the FEC decoder, we propose to add a new frame, the TBD frame to packets whose payload will contain one or more source symbols from the FEC decoder point of view.
The TBD frame is part of the packet payload itself.
Any packet containing a TBD frame MUST see its payload considered as one or more source symbol(s).
</t>

<t>
The TBD frame format is FEC Scheme specific and MUST be specified in the associated document.
</t>


        </section>

        <section title="Repair Symbol Signaling">
        <!-- ====================== -->


        </section>

        <section title="Signaling a Symbol Recovery">
        <!-- ====================== -->

<t>
When source symbols are recovered, a QUIC receiver SHOULD advertise the symbols recoveries to the sender in order to avoid retransmission of already received data.
The QUIC receiver MUST NOT acknowledge packets that have been recovered, as it would interfere with the behaviour of loss-based congestion controls such as <xref target="Cubic"/>.
</t>

<t>
<list hangIndent="4" style="hanging">
	<t hangText="Note:"> Being able to signal a QUIC packet recovery requires to identify this packet.
	Hence the question on adding the capability to recover this piece of information during FEC decoding.</t>
</list>
</t>

</section>

        <section title="About Gaps in the Set of Source Symbols Considered During Encoding">
        <!-- ====================== -->

<t>
A given FEC Scheme MAY support or not the presence of gaps in the set of source symbols that constitute a block (for Block codes) or an encoding window (for Sliding Window codes).
A potential cause for non contiguous sets of source symbols is the acknowledgment of one of them.
When this happens, the QUIC sending endpoint may want to remove this source symbol from further FEC encodings.
This is particularly true with Sliding Window codes because of their flexibility during FEC encoding (i.e., the encoding window can change between two consecutive FEC encodings).
</t>

<t>
Supporting gaps can be motivated by the desire to reduce encoding and decoding complexity since there are fewer variables.
However this choice has major consequences in terms of signaling.
Indeed each repair symbol transmitted MUST be accompanied with enough information for the QUIC decoding endpoint to unambiguously identify the exact composition of the block or encoding window.
Without any gap, the identity of the first source symbol plus the number of symbols in the block or encoding window is sufficient.
With gaps, a more complex encoding needs to be used, perhaps similar to the encoding used for selective acknowledgments.
</t>

<t>
Whether or not gaps are supported MUST be clarified in each FEC Scheme.
</t>

        </section>

    </section>


<!-- =========================================================================================== -->

    <section title="FEC Scheme Negotiation in QUIC">
    <!-- ====================== -->

<t>
FEC Scheme negotiation has two goals:
<list style="symbols">
    <t>Selecting a FEC Scheme (or FEC Schemes) that can be used by the QUIC transmission and reception endpoints.
    This process requires an exchange between them;</t>

    <t>Communicating a certain number of parameters, the "Configuration Information", that are not expected to change over the session lifetime.
    For instance, this is the case of the symbol size parameter, E (in bytes), that needs either to be agreed between the endpoints,
    or chosen by the sender and communicated to the receiver(s);</t>
</list>
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
    <list style="symbols">
    <t> It is likely that FEC Scheme negotiation requires the use of a new dedicated Extension Frame Type. The details remain TBD.</t>
    <t> The Negotiation Frame Type format remains TBD.</t>
    <t> How to communicate the parameters remains TBD.</t>
    <t> The present document only provides high level principles, the details are of course the responsibility of the FEC Scheme.</t>
    <t> In case negotiation is different when protecting a single versus several streams, this section may be moved to the respective sections.</t>
    <t> How does it work in case of a multicast session?</t>
    <t> Do we negotiate here a FEC Scheme on a per-Stream basis (or group of Streams to be protected jointly)?
        Or do we negotiate a FEC Scheme on a QUIC session basis, therefore to be used for all the Streams that need FEC protection?</t>
    </list></t>
</list>
</t>

        <section title="FEC Scheme Selection Process">
        <!-- ====================== -->

<t>
Let us consider the FEC Scheme selection process between the QUIC endpoints.
<xref target="fig_fec_scheme_selection"/> illustrates the principle when a QUIC reception endpoint initiates the exchange.
</t>

<figure anchor="fig_fec_scheme_selection" title="Example FEC Scheme selection process, during the initial negotiation.">
        <artwork><![CDATA[
QUIC sender                                       QUIC receiver
      < - - - - - - - - - - - - - - - - - - - - - -
             supported_fec_scheme_32b{FEC_Encoding_ID1 | other}
             supported_fec_scheme_64b{FEC_Encoding_ID2 | other}

choose FEC Scheme 1
      - - - - - - - - - - - - - - - - - - - - - - >
      supported_fec_scheme_32b{FEC_Encoding_ID1 | other}
]]></artwork>
</figure>

<t>
The supported_fec_scheme_16b and supported_fec_scheme_32b are two new TransportParameterId to be added to the
"Table 7: Initial QUIC Transport Parameters Entries" Section 13.1, of <xref target="QUIC-transport"/>.
The supported_fec_scheme_32b contains a 32-bit data field to carry opaque 32-bit value, while
the supported_fec_scheme_64b contains a 64-bit data field to carry opaque 64-bit value
(see <xref target="sec_fec_scheme_config_info"/>).
</t>

<t>
It is possible that the QUIC endpoint that receives one or more FEC Scheme proposals from the initiator cannot select any of them.
In that case the negotiation process fails...
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
    <list style="symbols">
    <t> So what? How does it finishes? Consequences?</t>
    <t> Can the second QUIC endpoint change the proposed static parameters? In that case can the initator refuse?</t>
    </list></t>
</list>
</t>

        </section>

        <section anchor="sec_fec_scheme_config_info" title="FEC Scheme Configuration Information">
        <!-- ====================== -->

<t>
Let us now focus on the communication of configuration information specific to the selected FEC Scheme.
In <xref target="fig_fec_scheme_selection"/>, the supported_fec_scheme_32b{FS1_Encoding_ID} contains a field
meant to carry the FEC Encoding ID of the FEC Scheme selected plus addditional configuration information if any.
If a 32 bit opaque field is not sufficient, the supported_fec_scheme_64b can be used instead and proposes a 64 bit
opaque field.
</t>

        </section>

    </section>


<!-- =========================================================================================== -->


    <section title="Security Considerations">
    <!-- ====================== -->

<t>TBD
</t>

    </section>

    <section anchor="iana" title="IANA Considerations">
    <!-- ====================== -->

<t>TBD
</t>

    </section>

    <section title="Acknowledgments">
    <!-- ====================== -->

<t>TBD
</t>

    </section>


</middle>

<!-- =========================================================================================== -->

 <back>

    <references title="Normative References">
    <!-- ====================== -->

    &RFC2119;

    <!-- https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml -->
    <reference anchor="QUIC-transport" target="https://datatracker.ietf.org/doc/draft-ietf-quic-transport/">
        <front>
            <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
            <author initials="J." surname="Iyengar" fullname="Jana Iyengar" role="editor">
                <organization>Fastly</organization>
            </author>
            <author initials="M." surname="Thomson" fullname="Martin Thomson" role="editor">
                <organization>Mozilla</organization>
            </author>
            <date year="2019" month="January"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-quic-transport (Work in Progress)"/>
    </reference>

<!--	&RFC8312;-->
    <!-- https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8312.xml -->
    <reference anchor="Cubic" target="https://www.rfc-editor.org/info/rfc8312">
        <front>
            <title>CUBIC for Fast Long-Distance Networks</title>
            <author initials="I." surname="Rhee" fullname="I. Rhee">
                <organization/>
            </author>
            <author initials="L." surname="Xu" fullname="L. Xu">
                <organization/>
            </author>
            <author initials="S." surname="Ha" fullname="S. Ha">
                <organization/>
            </author>
            <author initials="A." surname="Zimmermann" fullname="A. Zimmermann">
                <organization/>
            </author>
            <author initials="L." surname="Eggert" fullname="L. Eggert">
                <organization/>
            </author>
            <author initials="R." surname="Scheffenegger" fullname="R. Scheffenegger">
                <organization/>
            </author>
            <date year="2018" month="February"/>
            <abstract>
                <t>
                    CUBIC is an extension to the current TCP standards. It differs from the current TCP standards only in the congestion control algorithm on the sender side. In particular, it uses a cubic function instead of a linear window increase function of the current TCP standards to improve scalability and stability under fast and long-distance networks. CUBIC and its predecessor algorithm have been adopted as defaults by Linux and have been used for many years. This document provides a specification of CUBIC to enable third-party implementations and to solicit community feedback through experimentation on the performance of CUBIC.
                </t>
            </abstract>
        </front>
        <seriesInfo name="RFC" value="8312"/>
        <seriesInfo name="DOI" value="10.17487/RFC8312"/>
    </reference>

    </references>

    <references title="Informative References">
    <!-- ====================== -->
    <!-- &RFC3452; -->
    &RFC5510;

    <reference anchor="nc-taxonomy" target="https://datatracker.ietf.org/doc/draft-irtf-nwcrg-network-coding-taxonomy/">
        <front>
            <title>Taxonomy of Coding Techniques for Efficient Network Communications</title>
            <author initials="V." surname="Roca (Ed.) et al.">
            <organization>INRIA</organization>
            </author>
            <date year="2018" month="June"/>
        </front>
        <seriesInfo name="Request For Comments" value="RFC 8406"/>
    </reference>

    <reference anchor="RLC" target="https://tools.ietf.org/html/draft-ietf-tsvwg-rlc-fec-scheme">
        <front>
        <title>Sliding Window Random Linear Code (RLC) Forward Erasure Correction (FEC) Scheme for FECFRAME</title>
            <author initials="V" surname="Roca" fullname="Vincent Roca"> <organization /> </author>
            <author initials="B" surname="Teibi" fullname="Belkacem Teibi"> <organization /> </author>
            <date month="February" year="2019" />
        </front>
        <seriesInfo name='Work in' value='Progress' />
        <seriesInfo name='Transport Area Working Group (TSVWG)' value='draft-ietf-tsvwg-rlc-fec-scheme (Work in Progress)' />
    </reference>

   </references>

<!--
    <section anchor="avail-algo" title="Appendix: Reference Algorithms">

<t>This ID does not mandate nor depends on any coding scheme. However, in order to have an initial implementation with good performance and not encumbered by intellectual property and proprietary implementations, it is suggested to use the Raptor (RFC 5053) as a reference algorithm. However, since the Raptor code perform badly with small blocks, depending on the application, another alternative is to use Reed-Solomon (RFC 5510) codes. It is assumed that other candidates that are free of IPR may become candidates in the future.
</t>
    </section>

    <section anchor="middleboxes" title="Appendix: Participating Middleboxes">

<t>The coding approach described in this document does allow on path elements that have the ephemeral keys to decrypt packets and add or remove FEC packets.</t>
</section>

    <section anchor="API" title="Appendix: APIS">

<t>It is planned that the QUIC coding mechanism will conform to any common API defined in the research group.</t>

    </section>
-->

   <!-- Change Log v00 2017-03-03  MJM   Initial version -->

</back>

</rfc>
