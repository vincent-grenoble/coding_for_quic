<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!-- <!ENTITY RFC3452 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3452.xml"> -->
<!ENTITY RFC5510 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5510.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-swett-nwcrg-coding-for-quic-03" ipr="trust200902">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

<front>
	
   <title abbrev="Coding for QUIC">Coding for QUIC</title>

   <author fullname="Ian Swett" initials="I." surname="Swett">
     <organization>Google</organization>
     <address>
       <postal>
         <street></street>
         <city>Cambridge</city>
         <region>MA</region>
         <code></code>
         <country>US</country>
       </postal>
       <phone></phone>
       <email>ianswett@google.com</email>
     </address>
   </author>

  <author fullname="Marie-Jose Montpetit" initials="M-J." surname="Montpetit">
     <organization>Triangle Video</organization>
     <address>
       <postal>
         <street></street>
         <city>Boston</city>
         <region>MA</region>
         <code></code>
         <country>US</country>
       </postal>
       <phone></phone>
       <email>marie@mjmontpetit.com</email>
     </address>
   </author>

   <author fullname="Vincent Roca" initials="V." surname="Roca">
     <organization>INRIA</organization>
     <address>
       <postal>
         <street></street>
         <city>Univ. Grenoble Alpes</city>
         <region></region>
         <code></code>
         <country>France</country>
       </postal>
       <phone></phone>
       <email>vincent.roca@inria.fr</email>
     </address>
   </author>

   <author fullname="Francois Michel" initials="F." surname="Michel">
     <organization>UCLouvain</organization>
     <address>
       <postal>
         <street></street>
         <city>Louvain</city>
         <region></region>
         <code></code>
         <country>Belgium</country>
       </postal>
       <phone></phone>
       <email>francois.michel@uclouvain.be</email>
     </address>
   </author>
   <date/>

   <area>IRTF</area>

   <workgroup>nwcrg</workgroup>

   <keyword>QUIC, loss recovery, FEC coding, frame format, negotiation</keyword>

   <abstract>
<t>
This document focuses on the integration of FEC coding in the QUIC transport protocol, in order to recover from packet losses.
This document does not specify any FEC code but defines mechanisms to negotiate and integrate FEC Schemes in QUIC.
By using proactive loss recovery, it is expected to improve QUIC performance in sessions impacted by packet losses.
More precisely it is expected to improve QUIC performance with real-time sessions (since FEC coding makes packet loss recovery insensitive to the round trip time), with multicast sessions (since the same repair packet can recover several different losses at several receivers), and with multipath sessions (since repair packets add diversity).
</t>
   </abstract>

</front>

<middle>

	<section title="Introduction">
	<!-- ====================== -->

<t>
QUIC is a new transport that aims at improving network performance by enabling out of order delivery, partial reliability, and methods of recovery besides retransmission, while also improving security.
This document specifies a framework to enable FEC codes to be used to recover from lost packets within a single QUIC stream or across several QUIC streams.
</t>

<t>
The ability to add FEC coding in QUIC may be beneficial in several situations:
<list style="symbols">
	<t>for a robust transmission of latency sensitive traffic, for instance real-time flows, since it enables to recover packet losses independently of the round trip time;</t>
	<t>for the transmission of contents to a large set of QUIC reception endpoints, since the same repair frame may help recovering several different packet losses at different receivers;</t>
	<t>for multipath communications, since repair traffic adds diversity.</t>
</list>
</t>

<t>
This framework does not mandate the use of any specific FEC code (i.e., how to encode and decode) nor FEC Scheme (i.e., that specifies both a FEC code and how to use it, in particular in terms of signaling).
Instead it allows to negotiate the FEC Scheme to use at session startup, assuming that more than one solution could potentially be offered concurrently.
Without loss of generality, we assume that the encoding operations compute a linear combination of QUIC packets, regardless of whether these codes are of block type (as with Reed-Solomon codes <xref target="RFC5510"/>) or sliding window type (as with RLC codes <xref target="RLC"/>).
</t>

	</section>

	<section anchor="definitionsAndAbbreviations" title="Definitions and Abbreviations">
	<!-- ====================== -->

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.
</t>

<t>
Terms and definitions that apply to coding are available in <xref target="nc-taxonomy"/>.
More specifically, this document uses the following definitions:
<list style="hanging">
	<t hangText="Packet versus Symbol:">	a Packet is the unit of data that is exchanged over the network while a Symbol is
		the unit of data that is manipulated during the encoding and decoding operations</t>

	<t hangText="Source Symbol:">	a unit of data originating from the source that is used as input to encoding operations</t>

	<t hangText="Repair Symbol:">	a unit of data that is the result of a coding operation</t>

</list></t>

<t>This document uses the following abbreviations: <list style="hanging">
	<t hangText="E:">		size of an encoding symbol (i.e., source or repair symbol), assumed fixed (in bytes)</t>
</list></t>

	</section>


<!-- =========================================================================================== -->


	<section title="General Design Considerations">
	<!-- ====================== -->

<t>
This section lists a few general considerations that govern the framework for FEC coding support in QUIC.
</t>

		<section title="FEC Code versus FEC Scheme, Block Codes versus Sliding Window Codes">
		<!-- ====================== -->

<t>
A FEC code specifies the details of encoding and decoding operations.
In addition to that, a FEC Scheme defines the additional protocol aspects required to use a particular FEC code <xref target="nc-taxonomy"/>.
In particular the FEC Scheme defines signaling (e.g., information contained in Source and Repair Packet header or trailers) needed to synchronize encoders and decoders.
<!-- Adding FEC protection to QUIC requires a FEC Scheme specification to be available that not only defines how to perform encoding and decoding (i.e., the code specification, that can be re-used from another specification of this FEC code) but also all the surrounded aspects that enable its use along with QUIC. -->
</t>

<t>
Block coding (e.g., Reed-Solomon <xref target="RFC5510"/>) and sliding window coding (e.g., RLC <xref target="RLC"/>) are two broad classes of FEC codes <xref target="nc-taxonomy"/>.
In the first case, the input flow must be first segmented into a sequence of blocks, FEC encoding and decoding being performed independently on a per-block basis.
In the second case rely, a sliding encoding window continuously slides over the input flow.
It is envisioned that the two classes of codes could be used to bring FEC protection to QUIC, usually with an advantage for sliding window codes when it comes to low latency communications.
</t>

		</section>

		<section title="FEC Scheme Negotiation">
		<!-- ====================== -->

<t>
There are multiple FEC Scheme candidates.
Therefore a negotiation step is needed to select one or more codes to be used over a QUIC session.
This will be implemented using the one step negotiation of the new QUIC negotiation mechanism <xref target="QUIC-transport"/>, during the QUIC handshake.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	<list style="symbols">
		<t> It is likely that FEC Scheme negotiation requires the use of a new dedicated Extension Frame Type. To Be Clarified and text updated.</t>

		<t> It is not clear whether negotiation is meant to select a **single** FEC Scheme or **multiple** FEC Schemes.
		In the second case (multiple FEC) it is required to have a complementary mechanism to indicate which FEC Scheme is used in a given REPAIR frame (which could be done through as many REPAIR frame type values as potential FEC Scheme negotiated). Is it what we want to achieve? Not sure.</t>

		<t> It is not clear whether negotiation is carried out at QUIC level (and therefore for multiple streams) or at a stream level (and therefore multiple streams may use multiple FEC Schemes). The terminology used above should be updated to reflect the choice.</t>
	</list></t>
</list> </t>

		</section>

		<section title="FEC Protection Within an Encrypted Channel">
		<!-- ====================== -->

<t>
FEC encoding is applied before any QUIC encryption and authentication processing.
Source symbols, that constitute the data units used by the FEC codec, contain cleartext application data.
</t>

<!--
<t>
Coding should be applied to all QUIC packets except the 0RTT payloads. 
0RTT payloads are sent prior to negotiation, and the QUIC negotiation mechanism does not allow sending extension frames prior to handshake completion.
</t>
-->

		</section>

		<section title="About Middleboxes">
		<!-- ====================== -->

<t>
The coding approach described in this document does not allow on path elements (middleboxes) to take part in FEC protection.
The traffic being encrypted end-to-end, the middleboxes are not in position to perform FEC decoding, nor to add any redundant traffic.
</t>

		</section>

		<section title="Source symbol definition">
		<!-- ====================== -->

<t>
Several approaches can be considered on how to define the source symbols. A first approach could consist in exclusively
protecting the user data transiting through QUIC streams. Another approach could also protect control frames in addition
to the application data. In this section, we describe two possible approaches for the definition of source symbols.
</t>

			<t>
			<list hangIndent="4" style="hanging">
				<t hangText="Note:">
					I am asking myself if we should not just define a mean of communication between the FEC Scheme and the protocol.
					The protocol feeds packet payloads to the FEC Scheme and the scheme, upon source symbol recovery, feeds the protocol
					uniquely with *frames*. I think both the stream-based and packet-based approached can work this way and the FEC Scheme
					can decide how to define the source symbols, this draft only defining some frame formats and recommendations.
					For example,  the stream chunk-based approach could wrap the recovered STREAM chunks inside a STREAM frame and feed it
					to the protocol. The packet-based approach can simply feed the recovered frames without wrapping it in anything.
				</t>
			</list>
			</t>

			<section title="Stream-based source symbol definition">
			<!-- ====================== -->
<t>
Streams in QUIC provide a lightweight, ordered byte-stream abstraction.
In this approach, FEC encoding is applied at the stream level, within a single stream or across two or more streams of the same QUIC session.
This is motivated by the fact that FEC protection is not necessarily beneficial to all data streams, but only to a subset of them.
For instance FEC protection can be highly beneficial to live video streams to which the proactive erasure correction feature of FEC, independent of the RTT, should be highly beneficial.
On the opposite, FEC protection is probably less attractive for latency insensitive bulk unicast flows.
</t>

<t>
In order to facilitate experiments, and in order to enable backward compatibility, the STREAM frames that carry application data are kept unmodified.
On the opposite, frames that carry one or more repair symbols use a dedicated REPAIR frame type, chosen within the type range dedicated to "Extension Frames".
</t>


				<section title="Application data, STREAM Frame data and Source Symbols">
				<!-- ====================== -->

<t>
Application data is kept in a transmission buffer at a QUIC sending endpoint, and sent within STREAM frames.
Each STREAM frame that carries data contains an Offset field that indicates the offset within the stream of the first byte of the Stream Data field, as well as a Length field that indicates the number of bytes contained in the Stream Data field.
Upon receiving a STREAM frame, using the Offset and Length fields, a QUIC reception endpoint can easily store data in its reception buffer.
But since a QUIC Packet may be lost during transmission, the reception buffer may have gaps.
</t>

<t>
<xref target="fig_frame_2_ss_mapping"/> illustrates how source symbols can be mapped to the QUIC transmission or reception buffers (same principle on either side).
Since any source (and repair) symbol is of fixed size (E bytes) for a given stream, since QUIC guaranties that the first byte in the stream has an offset of 0, the position of each source symbol is known by both ends.
</t>

<figure anchor="fig_frame_2_ss_mapping" title="Example of source symbol mapping, when the E value is relatively small.">
	<artwork><![CDATA[
 < -E- > < -E- > < -E- > < -E- >
+-------+-------+-------+-------+
|< -- Frame 1 -- >< ----- Frame |  source symbols 0, 1, 2, 3
+-------+-------+-------+-------+
| 2 ----- >< --- Frame 3 -- >< -|  source symbols 4, 5, 6, 7
+-------+-------+----+--+-------+
| Frame 4 - >< -F5- >|             source symbols 8, 9 and 10
+-------+-------+----+             (incomplete)
]]></artwork>
</figure>

<t>
Any value for E is possible, from a single byte to several hundreds or thousands of bytes, as long as a frame containing a repair symbol (E bytes long) can fit into a QUIC packet.
In general, the source symbols are not aligned with data chunks sent in the STREAM frames.
A given STREAM frame may carry all the bytes of a given source symbol.
But when a source symbol straddles two or more (e.g., if E is large compared to usual frame size) STREAM frames, a proper reception of these two (or more) STREAM frames is needed for a QUIC reception endpoint to consider that the source symbol is available for FEC decoding operations.
The choice of an appropriate value for E may depend on the use case (in particular on the nature of application data).
A reasonably small value reduces the probability that a source symbol straddles two or more STREAM frames, a situation that is considered as potentially harmful (the unit of control, the source symbol, and unit of transmission, the frame, are not aligned).
However an overly small value also increases processing complexity (FEC encoding and decoding are performed over a larger linear system) so there is an incentive to use a larger value.
An appropriate balance should be found, and this choice is considered as out of scope for this document.
</t>
			</section>

			<section title="Management of Silent Periods and End of Stream">
				<!-- ====================== -->

				<t>
					If an application does not submit fresh data for some time, the last source symbol may not be totally filled.
					It follows that this last source symbol cannot be considered during FEC encoding and therefore the associated bytes of the application stream are not protected.
					A similar problem arrives when a stream is finished, the application having no more data to submit to QUIC.
					Here also, the bytes of the last incomplete source symbol are not protected by FEC encoding.
				</t>

				<t>
					In order to solve this problem, it is RECOMMENDED that a QUIC sending endpoint:
					<list style="symbols">
						<t> Identifies when such a situation is likely to occur, for instance by waiting no more than a certain time during an application silent period;</t>
						<t> Upon time-out, the application falls back to the alternative re-transmission based loss recovery mechanism for the bytes of the last incomplete source symbol;</t>
					</list>
				</t>

				<t>
					<list hangIndent="4" style="hanging">
						<t hangText="Editor's notes:"> Clearly, the above mechanism requires more thoughts as well as experimental work.
							The "end of stream" situation may be addressed through zero padding perhaps easily.
							However the use of zero padding for transitory silent periods may add a lot of specification and implementation complexity...</t>
					</list>
				</t>

			</section>
			<section title="Pros and cons of the approach">

<t>
	Pros:
	<list style="symbols">
		<t>
			Since QUIC streams initial offset is guaranteed to be zero, no explicit signaling needs to be send in order to designate the
			source symbols. Each source symbol is implicitly identified by its offset in the stream data. The first source symbol starts
			at stream offset zero and ends at stream offset E-1. The ith source symbol starts at stream offset (i-1)*E and ends at
			stream offset i*E - 1.
		</t>
		<t>
			There is no control data overhead. This approach aims at protecting application data and the source symbols strictly contain user data.
			The source symbols do not contain any additional QUIC frame header.
		</t>
		<t>
			Source data is transmitted without any modification, which provides backward compatibility.
			This is an advantage in situations where the same QUIC stream is simultaneously delivered to several QUIC reception endpoints (multicast): it enables a given FEC Scheme to be used even if a subset of the QUIC reception endpoints do not support it.
		</t>
	</list>
</t>

<t>
	Cons:
	<list style="symbols">
		<t>
			QUIC peers need to agree on the source symbol size E. A too large value for E makes it vulnerable to path MTU changes making the
			source symbols too large for a QUIC packet. In this case, a new value for E should be renegotiated or all the source symbols
			will span multiple QUIC packets, reducing the probability for the source symbol to be received as a whole.
		</t>
		<t>
			Source symbols can span several STREAM frames sent in distinct QUIC packets. Source symbol 2 in <xref target="fig_frame_2_ss_mapping"/>
			spans the two first STREAM frames. These two STREAM frames need to be received for the source symbol 2 to be considered as received by
			a FEC decoder.
		</t>
	</list>
</t>
			</section>
		</section>

		<section title="Packet-based source symbol definition">
			<t>
				<list hangIndent="4" style="hanging">
					<t hangText="Note:"> Not sure at this stage if this is really a packet-based approach or a frames-based approach... I prefer the idea of a frames-based approach
						but I still keep the notion of packet numbers for the source symbol definition. I think this notion should disappear in favour of the SFPID. </t>
				</list>
			</t>
			<t>
				Although application data are originally intended to be transmitted through the QUIC stream abstraction, the design of QUIC aims at easy extensibility and other means
				of application data transmission could be added as QUIC extensions. This is already the case for the recently proposed DATAGRAM extension of the protocol. Moreover, QUIC
				transfers might benefit from protecting control frames having a potential impact on the transmission throughput, such as MAX_DATA or MAX_STREAM_DATA frames. The
				packet-based source symbol definition thus considers the sequence of frames (or a sub-sequence of them) transmitting through QUIC packets as a source symbol.
			</t>

			<section title="Signaling packet payloads as source symbols">
				<t>
					Conversely to the stream-based approach, an explicit signaling is needed by a decoder to identify the source symbols and their position in the coding window.
					While the QUIC packet number increases monotonically, it cannot be used to identify the position of a packet in the coding window as the packet number is not
					needed to increase by 1 for each new packet. There is thus an ambiguity on the decoder-side between lost packets and packets that do not exist. Similarly to
					FECFRAME, we propose to assign a identifier to source symbols to avoid this ambiguity. This identifier is opaque to the protocol and will be defined by the
					underlying FEC schemes. This is out of the scope of this document. An example of identifier could be an integer increasing by 1 for each new source symbol
				</t>

				<t>
					In order to announce the source symbol identifier to the FEC decoder, we propose to add a new frame, the FEC_SOURCE_ID frame to packets whose payload
					will be considered as a source symbol. The FEC_SOURCE_ID frame is part of the packet payload itself. <xref target="fig_fec_source_id_frame"/> shows the format
					of the FEC_SOURCE_ID frame. Any packet containing a FEC_SOURCE_ID frame MUST see its payload considered as a source symbol.
				</t>

				<figure anchor="fig_fec_source_id_frame" title="The FEC_SOURCE_ID frame format. The Source Symbol ID field content is defined by the underlying FEC scheme">
					<artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Source Symbol ID (i)                     ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
				</figure>
				<t>
					During the FEC encoding phase, additional data can be added to the source symbol. These data are only added during the encoding and MUST NOT be transmitted
					on the wire. The encoder and decoder MUST agree on the addition of these data to the source symbol in order to avoid decoding errors. Here are some examples
					of data that can be added to a source symbol during encoding and that will be decoded upon a source symbol recovery :

					<list style="symbols">
						<t>
							The packet number: adding the packet number allows the decoder to know which packet has been recovered and potentially send a feedback of which
							packet has been recovered to the QUIC sender.
						</t>
						<t>
							Additional QUIC frames: the FEC encoder can for example add PADDING frames to a source symbol before proceeding to encoding. Adding PADDING frames
							to source symbols before encoding allows protecting packets of different sizes. The smaller packet payload will be added PADDING frames to match the
							size of the largest packet payload in the encoding window.
						</t>
					</list>

					<list hangIndent="4" style="hanging">
						<t hangText="Note:"> Maybe the decision of adding data such as padding in the source symbols should be leaved to the underlying FEC Scheme. </t>
					</list>
				</t>
				<t>
					Besides adding data to source symbols before encoding, some frames can be removed from the source symbol if their protection is not crucial for the
					transmission in order to reduce the size of the source symbol. For example, ACK frames can be systematically stripped out of the source symbols. Stream frames of
					non-delay-sensitive streams could also be removed from the source symbol. The encoder and decoder MUST agree on which frames must be stripped out of packet payloads.
					This information might for example be encoded in the Source Symbol ID by the FEC encoder.
				</t>
				<t>
					<list hangIndent="4" style="hanging">
						<t hangText="Note:"> We might want to propose standard ways/algorithms to add/remove data before the encoding ? </t>
					</list>
				</t>
			</section>
		</section>
		<section title="Pros and cons of the approach">

			<t>
				Pros:
				<list style="symbols">
					<t>
						No need to agree on a fixed source symbol size. Packet payloads of different sizes can be adjusted by adding PADDING frames to the source symbols before encoding/decoding.
						This also solves the silent period problem: there is not need to fill source symbols with user data in order to consider them in the coding window.
					</t>
					<t>
						This approach solves the problem of source symbols spanning several distinct QUIC packets. As the source symbols consist in packet payloads, the probability of
						receiving a whole source symbol is equal to the probability of receiving the packet without error.
					</t>
					<t>
						This approach allows protecting more than only stream data, including:
						<list style="symbols">
							<t>
								User data transmitted outside QUIC streams, such as data transmitted through DATAGRAM frames.
							</t>
							<t>
								QUIC control frames, such as MAX_DATA or MAX_STREAM_DATA frames whose loss might impact the throughput during high-delay communications.
							</t>
							<t>
								New frames defined by future QUIC extensions whose loss might be critical on the quality of the transmission.
							</t>
							<t>
								Several streams can be protected seamlessly without additional signalling.
							</t>
						</list>
					</t>
				</list>
			</t>

			<t>
				Cons:
				<list style="symbols">
					<t>
						An explicit signalling is needed to identify the source symbols, increasing the FEC protection overhead. This additional signalling
						is carried through the FEC_SOURCE_ID frame.
					</t>
					<t>
						Protecting the STREAM frames header in addition to their payload adds overhead compared to the stream-based solution where only the
						stream payload is protected.
					</t>
					<t>
						The added overhead increases the probability of a repair symbol to be too large to fit into a single QUIC packet. In that case, the
						repair symbol should be fragmented into several QUIC packets, decreasing the probability of receiving a whole repair symbol. The
						payload size of a FEC-protected packet can be slightly reduced to ensure the repair symbols to fit into a single packet, increasing the relative
						overhead added by the QUIC packet header compared to the payload size.
					</t>
				</list>
			</t>
		</section>


		<section title="About Gaps in the Set of Source Symbols Considered During Encoding">
		<!-- ====================== -->

<t>
A given FEC Scheme MAY support or not the presence of gaps in the set of source symbols that constitute a block (for Block codes) or an encoding window (for Sliding Window codes).
A potential cause for non contiguous sets of source symbols is the acknowledgment of one of them.
When this happens, the QUIC sending endpoint may want to remove this source symbol from further FEC encodings.
This is particularly true with Sliding Window codes because of their flexibility during FEC encoding (i.e., the encoding window can change between two consecutive FEC encodings).
</t>

<t>
Supporting gaps can be motivated by the desire to reduce encoding and decoding complexity since there are fewer variables.
However this choice has major consequences in terms of signaling.
Indeed each repair symbol transmitted MUST be accompanied with enough information for the QUIC decoding endpoint to unambiguously identify the exact composition of the block or encoding window.
Without any gap, the identity of the first source symbol plus the number of symbols in the block or encoding window is sufficient.
With gaps, a more complex encoding needs to be used, perhaps similar to the encoding used for selective acknowledgments.
</t>

<t>
Whether or not gaps are supported MUST be clarified in each FEC Scheme.
</t>

		</section>

	</section>


<!-- =========================================================================================== -->

	<section title="FEC Scheme Negotiation in QUIC">
	<!-- ====================== -->

<t>
FEC Scheme negotiation has two goals:
<list style="symbols">
	<t>Selecting a FEC Scheme (or FEC Schemes) that can be used by the QUIC transmission and reception endpoints.
	This process requires an exchange between them;</t>

	<t>Communicating a certain number of parameters, the "Configuration Information", that are not expected to change over the session lifetime.
	For instance, this is the case of the symbol size parameter, E (in bytes), that needs either to be agreed between the endpoints,
	or chosen by the sender and communicated to the receiver(s);</t>
</list>
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	<list style="symbols">
	<t> It is likely that FEC Scheme negotiation requires the use of a new dedicated Extension Frame Type. The details remain TBD.</t>
	<t> The Negotiation Frame Type format remains TBD.</t>
	<t> How to communicate the parameters remains TBD.</t>
	<t> The present document only provides high level principles, the details are of course the responsibility of the FEC Scheme.</t>
	<t> In case negotiation is different when protecting a single versus several streams, this section may be moved to the respective sections.</t>
	<t> How does it work in case of a multicast session?</t>
	<t> Do we negotiate here a FEC Scheme on a per-Stream basis (or group of Streams to be protected jointly)?
		Or do we negotiate a FEC Scheme on a QUIC session basis, therefore to be used for all the Streams that need FEC protection?</t>
	</list></t>
</list>
</t>

		<section title="FEC Scheme Selection Process">
		<!-- ====================== -->

<t>
Let us consider the FEC Scheme selection process between the QUIC endpoints.
<xref target="fig_fec_scheme_selection"/> illustrates the principle when a QUIC reception endpoint initiates the exchange.
</t>

<figure anchor="fig_fec_scheme_selection" title="Example FEC Scheme selection process, during the initial negotiation.">
        <artwork><![CDATA[
QUIC sender                                       QUIC receiver
      < - - - - - - - - - - - - - - - - - - - - - -
             supported_fec_scheme_32b{FEC_Encoding_ID1 | other}
             supported_fec_scheme_64b{FEC_Encoding_ID2 | other}

choose FEC Scheme 1
      - - - - - - - - - - - - - - - - - - - - - - >
      supported_fec_scheme_32b{FEC_Encoding_ID1 | other}
]]></artwork>
</figure>

<t>
The supported_fec_scheme_16b and supported_fec_scheme_32b are two new TransportParameterId to be added to the
"Table 7: Initial QUIC Transport Parameters Entries" Section 13.1, of <xref target="QUIC-transport"/>.
The supported_fec_scheme_32b contains a 32-bit data field to carry opaque 32-bit value, while
the supported_fec_scheme_64b contains a 64-bit data field to carry opaque 64-bit value
(see <xref target="sec_fec_scheme_config_info"/>).
</t>

<t>
It is possible that the QUIC endpoint that receives one or more FEC Scheme proposals from the initiator cannot select any of them.
In that case the negotiation process fails...
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	<list style="symbols">
	<t> So what? How does it finishes? Consequences?</t>
	<t> Can the second QUIC endpoint change the proposed static parameters? In that case can the initator refuse?</t>
	</list></t>
</list>
</t>

		</section>

		<section anchor="sec_fec_scheme_config_info" title="FEC Scheme Configuration Information">
		<!-- ====================== -->

<t>
Let us now focus on the communication of configuration information specific to the selected FEC Scheme.
In <xref target="fig_fec_scheme_selection"/>, the supported_fec_scheme_32b{FS1_Encoding_ID} contains a field
meant to carry the FEC Encoding ID of the FEC Scheme selected plus addditional configuration information if any.
If a 32 bit opaque field is not sufficient, the supported_fec_scheme_64b can be used instead and proposes a 64 bit
opaque field.
</t>

		</section>

	</section>


<!-- =========================================================================================== -->

	<section title="Procedures when Protecting a Single QUIC Stream">
	<!-- ====================== -->

<t>
This section focuses on the simple case where FEC protection is applied to a single QUIC stream.
We consider a unidirectional data flow between a QUIC sending endpoint and one (or more) QUIC reception endpoints.
</t>


		</section>


		<section title="Signaling Considerations within REPAIR Frames">
		<!-- ====================== -->

<t>
<!--Once the initial negotiation succeeded and an appropriate FEC Scheme has been chosen between the QUIC endpoints, data is exchanged as follows.-->
<!--Source data is transmitted within STREAM frames, as would happen without any FEC based loss recovery mechanism (in particular without considering source symbols boundaries).-->
Repair data, computed during FEC encoding, is sent within a dedicated REPAIR frame type, chosen within the type range dedicated to "Extension Frames".
<!--In both cases, the same Stream ID is used since both flows relate to the same stream.-->
</t>

<t>
The REPAIR frame format is FEC Scheme dependent.
The document specifying a FEC Scheme to be used with QUIC MUST define the REPAIR frame format, among other things.
The REPAIR frame MUST carry enough information for a QUIC reception endpoint to understand exactly how this repair symbol(s) has(ve) been generated.
It implies that each REPAIR symbol MUST communicate the block (with block codes) or encoding window (with Sliding Window codes) composition.
When there is no gap in the source symbol set, this MAY be achieved by communicating:
<list style="symbols">
	<t>the offset of the first source symbol of the block or encoding window;</t>
	<t>the number of source symbols in the block or encoding window
<!--		, which can be either a number of symbols or a number of bytes since symbols are of fixed size, E-->
		.</t>
</list>
<!--The text commented hereunder is now already explained in the section about source symbol definition.-->
<!--Note that unlike FEC Schemes for FLUTE/ALC, NORM, and FECFRAME, here there is no notion of Encoding Symbol Id (ESI).-->
<!--The use of an offset within the stream, with the guaranty that no wrapping to zero can occur, provides an alternative mechanism to identify any source symbol.-->
</t>


<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	<list style="symbols">
		<t>This I-D proposes to define a single generic REPAIR frame type, but an alternative could be to have a one-to-one mapping between a REPAIR frame type and a specific FEC Scheme.</t>

		<t>The use of frame type within the Extension Frames range for REPAIR frames is meant to facilitate experimentations.
		If the use of coding in QUIC is recognized as having benefits, a dedicated (or more, see above) frame type could be selected later on.</t>
	</list></t>
</list>
</t>

		</section>



	</section>


<!-- =========================================================================================== -->

	<section title="Procedures when Protecting Several QUIC Streams">
	<!-- ====================== -->

<t>
This section focuses on the general case where FEC protection is globally applied across two or more QUIC streams.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
It is not clear whether this use-case is needed.
It adds specification and implementation complexity that need to be balanced with the expected benefits.
	<list style="symbols">
	<t> Receiver: A first complexity comes from the requirement to identify to which stream a decoded source symbol belongs to.
	This is also one of the main difficulty for FECFRAME (both with block and sliding window codes) which required to distinguish an ADU (submitted by the application) from an ADUI (the same ADU plus an additional FlowID among other things).
	Do we want this level of complexity?</t>

	<t> Sender: Another complexity comes from the encoding window management at a sender. With multiple streams, shifting the encoding window to the right needs to be done based on timestamps associated to source symbols of the various streams: the oldest source symbol across all the streams will be removed.
	</t>

	<t> When two largely different streams are protected togethers (e.g., a high definition 4K video flow plus the associated relatively low-rate audio stream), is this extra complexity balanced by significant performance improvements compared to an independent protection on each stream (intuition is yes, the low bitrate flow is better protected iff the encoding window is large enough)?
	And when the various streams have a comparable bitrate?
	More work (incl. experimental work) is needed to answer this question.</t>
	</list> </t>
</list>
</t>

		<section title="Application data, STREAM Frame data and Source Symbols">
		<!-- ====================== -->

<t>
Within each stream, the source symbols MUST be defined as in the simple case of a single stream.
<xref target="fig_frame_2_ss_mapping"/> remains valid.
</t>

		</section>

		<section title="Block or Encoding Window Management">
		<!-- ====================== -->

<t>
The details of how to create the block or encoding window are specific to the FEC Scheme.
A possible approach is the following.
</t>

<t>
When creating the block (block FEC code) or encoding window (sliding window FEC code), the source symbols to consider of each stream are appended.
All the relevant source symbols of the first stream are appended, followed by all the source symbols of the second stream, etc.
These sequences do not follow any timing consideration in order to simplify signaling.
</t>

<t>
<xref target="fig_ew_across_2_streams"/> illustrates, in case of a Sliding Window FEC Scheme, an encoding window with source symbols belonging to two streams, of Stream ID 120 and 51 respectively.
</t>

<figure anchor="fig_ew_across_2_streams" title="Example of encoding window of a Sliding Window FEC Scheme and FEC protection across two streams.">
        <artwork><![CDATA[
< ----------- Stream ID 120 ---------- > < --- Stream ID 51 --- >
+-------+-------+-------+-------+-------+-------+-------+-------+
|       |       |       |       |       |       |       |       |
+-------+-------+-------+-------+-------+-------+-------+-------+
 ^       < -E- >                         ^
 |                                       |
offset = 0x42f0, length = 5*E       offset = 0x0f24, length = 3*E
]]></artwork>
</figure>

		</section>


		<section title="Signaling Considerations within STREAM and REPAIR Frames">
		<!-- ====================== -->

<t>
Source data on each stream is transmitted within STREAM frames, as would happen without any FEC based loss recovery mechanism.
</t>

<t>
Repair symbols, generated during FEC encoding as a linear combination of source symbols that belong to one or more of the streams, are transmitted within REPAIR frames.
Each REPAIR frame can be associated to any of the input streams it protects, and therefore associated to any of the associated Stream IDs.
</t>

<t>
<list hangIndent="4" style="hanging">
<t hangText="Editor's notes:">
	Check that indeed, with FEC protection across several streams, assigning a REPAIR frame to any of the streams it protects is meaningful.
	Should an approach for selecting one stream (and Stream ID) be preferred?</t>
</list>
</t>

<t>
The REPAIR frame format is FEC Scheme dependent and MUST be defined by the FEC Scheme specification document.
One of the key information of this REPAIR frame is the composition of the block (with block codes) or encoding window (with sliding window codes) used to perform FEC encoding.
Indeed, this is the only manner to convey this information since an application flow is not predictable (e.g., if an application flow is momentarily suspended, the composition of the block or encoding window will be affected).
One possibility is to list, in each REPAIR frame header:
<list style="symbols">
	<t>the actual number of streams considered (the maximum number is known after the negotiation step, but if one of the streams remains silent for some time, it may not contribute during encoding and therefore be absent from the block or encoding window); </t>
	<t>for each stream concerned, its Stream ID, the offset of the first source symbol considered as well as the length, i.e., the number of bytes considered.</t>
</list>
This approach does not enable to keep track of the source symbol ordering across streams, but enables a non ambiguous description of the encoding window.
</t>

<t>
The FEC Scheme specification MUST also detail how to manage the block or encoding window.
For instance, should the oldest source symbol of any stream be removed from the encoding window when this latter is shifted to the right?
This would mean that a timestamp is attached to each source symbol in order to identify the oldest one across all streams.
</t>

		</section>

	</section>


<!-- =========================================================================================== -->


	<section title="Security Considerations">
	<!-- ====================== -->

<t>TBD
</t>

	</section>

	<section anchor="iana" title="IANA Considerations">
	<!-- ====================== -->

<t>TBD
</t>

	</section>

	<section title="Acknowledgments">
	<!-- ====================== -->

<t>TBD
</t>

	</section>


</middle>

<!-- =========================================================================================== -->

 <back>

	<references title="Normative References">
	<!-- ====================== -->

	&RFC2119;

	<!-- https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml -->
	<reference anchor="QUIC-transport" target="https://datatracker.ietf.org/doc/draft-ietf-quic-transport/">
		<front>
			<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
			<author initials="J." surname="Iyengar" fullname="Jana Iyengar" role="editor">
				<organization>Fastly</organization>
			</author>
			<author initials="M." surname="Thomson" fullname="Martin Thomson" role="editor">
				<organization>Mozilla</organization>
			</author>
			<date year="2019" month="January"/>
		</front>
		<seriesInfo name="Internet-Draft" value="draft-ietf-quic-transport (Work in Progress)"/>
	</reference>

 	</references>

	<references title="Informative References">
	<!-- ====================== -->
	<!-- &RFC3452; -->
	&RFC5510;

	<reference anchor="nc-taxonomy" target="https://datatracker.ietf.org/doc/draft-irtf-nwcrg-network-coding-taxonomy/">
		<front>
			<title>Taxonomy of Coding Techniques for Efficient Network Communications</title>
			<author initials="V." surname="Roca (Ed.) et al.">
			<organization>INRIA</organization>
			</author>
			<date year="2018" month="June"/>
		</front>
		<seriesInfo name="Request For Comments" value="RFC 8406"/>
	</reference>

	<reference anchor="RLC" target="https://tools.ietf.org/html/draft-ietf-tsvwg-rlc-fec-scheme">
		<front>
		<title>Sliding Window Random Linear Code (RLC) Forward Erasure Correction (FEC) Scheme for FECFRAME</title>
			<author initials="V" surname="Roca" fullname="Vincent Roca"> <organization /> </author>
			<author initials="B" surname="Teibi" fullname="Belkacem Teibi"> <organization /> </author>
			<date month="February" year="2019" />
		</front>
		<seriesInfo name='Work in' value='Progress' />
		<seriesInfo name='Transport Area Working Group (TSVWG)' value='draft-ietf-tsvwg-rlc-fec-scheme (Work in Progress)' />
	</reference>

   </references>

<!--
	<section anchor="avail-algo" title="Appendix: Reference Algorithms">

<t>This ID does not mandate nor depends on any coding scheme. However, in order to have an initial implementation with good performance and not encumbered by intellectual property and proprietary implementations, it is suggested to use the Raptor (RFC 5053) as a reference algorithm. However, since the Raptor code perform badly with small blocks, depending on the application, another alternative is to use Reed-Solomon (RFC 5510) codes. It is assumed that other candidates that are free of IPR may become candidates in the future.
</t>
	</section>

	<section anchor="middleboxes" title="Appendix: Participating Middleboxes">

<t>The coding approach described in this document does allow on path elements that have the ephemeral keys to decrypt packets and add or remove FEC packets.</t>
</section>

	<section anchor="API" title="Appendix: APIS">

<t>It is planned that the QUIC coding mechanism will conform to any common API defined in the research group.</t>

	</section>
-->

   <!-- Change Log v00 2017-03-03  MJM   Initial version -->

</back>

</rfc>
